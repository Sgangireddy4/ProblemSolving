Given an unsorted array of nonnegative integers, find a continous subarray which adds to a given number. 
Let that be k.

Sliding window algo works since all positive or zero numbers. so clearly at any point if we go over the target, we know we have to bring
left side closer. 

def SubarrayofTargetSum(nums, k):
      if len(nums) ==0: print('No Answer')
      l = 0
      r = len(nums)-1
      total = nums[0]
      while r <len(nums):
            if target == k: return [l,r]
            elif target < k: 
                  r = r+1
                  if r<len(nums): target += nums[r]
            else:
                  l = l+1
                  target -= nums[l]
      return None
                    

# Complexity analysis. Since we are running through the loop only once visiting each index atmost twice, O(n) time complexity and 
# as we are storing only three variables, #O(1) space complexity
